# The following code to create a dataframe and remove duplicated rows is always executed and acts as a preamble for your script: 

# dataset = pandas.DataFrame(DeliveryDate_month, Average Order Amount in GBP)
# dataset = dataset.drop_duplicates()

# Paste or type your script code here:
import matplotlib.pyplot as plt
#warnings.filterwarnings("ignore")
#plt.style.use('fivethirtyeight')
import pandas as pd
import statsmodels.api as sm
import matplotlib

matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 12
matplotlib.rcParams['ytick.labelsize'] = 12
matplotlib.rcParams['text.color'] = 'k'

#df = pd.read_csv('dataset.txt', delimiter="\t", parse_dates=['DeliveryDate_month'])
#df = pd.read_csv('dataset.txt', delimiter="\t")
#cols = ['InvoiceID','StockItemID','Quantity','UnitPrice','TaxRate','TaxAmount','LineProfit','CustomerID','SalespersonPersonID','DeliveryDate','ConfirmedReceivedBy','DeliveryMethodName','SalesRevenue','LineProfit_GBP','TaxAmount_GBP','UnitPrice_GBP']
#df.drop(cols, axis=1, inplace=True)
df = dataset
df['SalesRevenue_GBP'] = df[df.columns[0]].replace('[\Â£,]', '', regex=True).astype(float)
F = df
F.columns=['Index','OrderID','SalesRevenue_GBP','DeliveryDate_month']

#######################

from dateutil.parser import parse
F['DeliveryDate_month'] = map(parse,F['DeliveryDate_month'])

date_max = F['DeliveryDate_month'].max()
year = date_max.year-3
date_min = date_max.replace(year)

F = F.sort_values('OrderID')

######################
#Set Multi-index
F.set_index(['DeliveryDate_month','OrderID'], drop=False)
#Group and calculate SUM by OrderID
F = F.groupby(['DeliveryDate_month','OrderID']).agg({'SalesRevenue_GBP':"sum"})

#Resample, applying mean Order amount
# use start of each month as the timestamp
y = F['SalesRevenue_GBP'].resample('MS', level=0).mean()

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8

#forecasting with Seasonal ARIMA (Autoregressive Integrated Moving Averag)

#p = d = q = range(0, 2)
#pdq = list(itertools.product(p, d, q))
#seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]

y=y[:-1]
mod = sm.tsa.statespace.SARIMAX(y,
                                order=(1, 1, 1),
                                seasonal_order=(1, 1, 0, 12),
                                enforce_stationarity=False,
                                enforce_invertibility=False)

results = mod.fit()

#forecasts with confidence intervals generated by the model, 
#confidence intervals grow larger as we move further out into the future.

pred_uc = results.get_forecast(steps=3)
pred_ci = pred_uc.conf_int()

ax = y.plot(label='observed', figsize=(14, 7))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Date')
ax.set_ylabel('Average order amount, GBP')
plt.title("Average order amount in GBP", size = 30)
plt.legend()
plt.show()
