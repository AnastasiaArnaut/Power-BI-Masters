# The following code to create a dataframe and remove duplicated rows is always executed and acts as a preamble for your script: 

# dataset = pandas.DataFrame(Index, CustomerID, SalesRevenue_GBP, DeliveryDate_month, WebsiteURL, DeliveryMethodName)
# dataset = dataset.drop_duplicates()

# Paste or type your script code here:
import matplotlib.pyplot as plt
#warnings.filterwarnings("ignore")
#plt.style.use('fivethirtyeight')
import pandas as pd
import statsmodels.api as sm
import matplotlib

matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 12
matplotlib.rcParams['ytick.labelsize'] = 12
matplotlib.rcParams['text.color'] = 'k'

#SELECTED COLUMNS FOR VISUAL: 
#FACTSales:
# 'Index', 'DeliveryDate_month', 'SalesRevenue_GBP
#Customers:
#CustomerID, WebsiteURL, DeliveryMethodName

####TO BE REMOVED OR MUTED#######
#df1 = pd.read_csv('dataset2_customers.txt', delimiter="\t")
##########################

#Customer Collect
#df = pd.read_csv('dataset.txt', delimiter="\t", parse_dates=['DeliveryDate_month'])
#df = pd.read_csv('dataset.txt', delimiter="\t")
#cols = ['InvoiceID','StockItemID','Quantity','UnitPrice','TaxRate','TaxAmount','LineProfit','OrderID','SalespersonPersonID','DeliveryDate','ConfirmedReceivedBy','DeliveryMethodName','SalesRevenue','LineProfit_GBP','TaxAmount_GBP','UnitPrice_GBP']
#df.drop(cols, axis=1, inplace=True)
df = dataset
df['SalesRevenue_GBP'] = df[df.columns[0]].replace('[\Â£,]', '', regex=True).astype(float)
F = df

####TO BE REMOVED OR MUTED#######
#F = pd.DataFrame.merge(F, df1, how='left', left_on='CustomerID', right_on = 'CustomerID')

###############
#F = dataset

F.columns=['Index','CustomerID', 'SalesRevenue_GBP', 'DeliveryDate_month', 'WebsiteURL', 'DeliveryMethodName']
a = F['WebsiteURL'].values

for i in range(len(a)):
    a[i] = a[i].count('www.microsoft.com')

F['shop'] = a

#Exclude Sales where Customer Collection 
F = F.loc[F['DeliveryMethodName'] != 'Customer Collect']

#######################

from dateutil.parser import parse
F['DeliveryDate_month'] = map(parse,F['DeliveryDate_month'])
#F['DeliveryDate_month'] = map(lambda x: x.date(), F['DeliveryDate_month'])

date_max = F['DeliveryDate_month'].max()
year = date_max.year-3
date_min = date_max.replace(year)

F = F.sort_values('DeliveryDate_month')

######################

#Indexing with Time Series Date
F = F.set_index('DeliveryDate_month')

#F1 = Online sales only ('shop' != 1)
F1 = F.loc[F['shop'] != 1]
cols = ['CustomerID', 'WebsiteURL', 'shop', 'DeliveryMethodName']
F1.drop(cols, axis=1, inplace=True)

#Sum by month
# use start of each month as the timestamp

y = F['SalesRevenue_GBP'].resample('MS').sum()
y1 = F1['SalesRevenue_GBP'].resample('MS').sum()
y = y.reset_index()
y1 = y1.reset_index()
y1.columns = ['DeliveryDate_month','SalesRevenue_GBP_online']
y = pd.DataFrame.merge(y, y1, how='left', left_on='DeliveryDate_month', right_on = 'DeliveryDate_month')

s = y['SalesRevenue_GBP']
s_online = y['SalesRevenue_GBP_online']
s_perc = [s_online/s for s,s_online in zip(s,s_online)]
y['Online_sales_perc'] = s_perc

cols = ['SalesRevenue_GBP', 'SalesRevenue_GBP_online']
y.drop(cols, axis=1, inplace=True)
y = y.set_index('DeliveryDate_month')

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8

#forecasting with Seasonal ARIMA (Autoregressive Integrated Moving Averag)

#p = d = q = range(0, 2)
#pdq = list(itertools.product(p, d, q))
#seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]

y=y[:-1]
mod = sm.tsa.statespace.SARIMAX(y,
                                order=(1, 1, 1),
                                seasonal_order=(1, 1, 0, 12),
                                enforce_stationarity=False,
                                enforce_invertibility=False)

results = mod.fit()

#forecasts with confidence intervals generated by the model, 
#confidence intervals grow larger as we move further out into the future.

pred_uc = results.get_forecast(steps=3)
pred_ci = pred_uc.conf_int()

#plot ARIMA forcast
ax = y.plot(label='Actual', figsize=(14, 7))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Date')
ax.set_ylabel('Percentage of Online sales to overall sales')
plt.title("Online sales percentage of sales, excl. cust. collection ", size = 25)
plt.legend()
plt.show()
