# The following code to create a dataframe and remove duplicated rows is always executed and acts as a preamble for your script: 

# dataset = pandas.DataFrame(Index, CustomerID, SalesRevenue_GBP, DeliveryDate_month, WebsiteURL, DeliveryMethodName)
# dataset = dataset.drop_duplicates()

# Paste or type your script code here:
import numpy as np
import matplotlib.pyplot as plt
#warnings.filterwarnings("ignore")
#plt.style.use('fivethirtyeight')
import pandas as pd
import statsmodels.api as sm
import matplotlib

matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 12
matplotlib.rcParams['ytick.labelsize'] = 12
matplotlib.rcParams['text.color'] = 'k'

#SELECTED COLUMNS FOR VISUAL: 
#FACTSales:
# 'Index', 'DeliveryDate_month', 'SalesRevenue_GBP
#Customers:
#CustomerID, WebsiteURL, DeliveryMethodName

####TO BE REMOVED OR MUTED#######
#df1 = pd.read_csv('dataset2_customers.txt', delimiter="\t")
##########################

#Customer Collect
#df = pd.read_csv('dataset.txt', delimiter="\t", parse_dates=['DeliveryDate_month'])
#df = pd.read_csv('dataset.txt', delimiter="\t")
#cols = ['InvoiceID','StockItemID','Quantity','UnitPrice','TaxRate','TaxAmount','LineProfit','OrderID','SalespersonPersonID','DeliveryDate','ConfirmedReceivedBy','DeliveryMethodName','SalesRevenue','LineProfit_GBP','TaxAmount_GBP','UnitPrice_GBP']
#df.drop(cols, axis=1, inplace=True)
df = dataset
df['SalesRevenue_GBP'] = df[df.columns[0]].replace('[\Â£,]', '', regex=True).astype(float)
F = df

####TO BE REMOVED OR MUTED#######
#F = pd.DataFrame.merge(F, df1, how='left', left_on='CustomerID', right_on = 'CustomerID')

###############
#F = dataset

F.columns=['Index','CustomerID', 'SalesRevenue_GBP', 'DeliveryDate_month', 'WebsiteURL', 'DeliveryMethodName']
a = F['WebsiteURL'].values

for i in range(len(a)):
    a[i] = a[i].count('www.microsoft.com')

F['shop'] = a

#Select Shop sales only ('shop' = 1)
F = F.loc[F['shop'] != 1]

#######################
#from dateutil.parser import parse
#index = range(len(df['DeliveryDate_month']))
#for i in index:
#    df['DeliveryDate_month'][i]=parse(df['DeliveryDate_month'][i]).date

from dateutil.parser import parse
F['DeliveryDate_month'] = map(parse,F['DeliveryDate_month'])
#F['DeliveryDate_month'] = map(lambda x: x.date(), F['DeliveryDate_month'])

date_max = F['DeliveryDate_month'].max()
year = date_max.year-3
date_min = date_max.replace(year)

F = F.sort_values('DeliveryDate_month')

######################

#Indexing with Time Series Data
F = F.set_index('DeliveryDate_month')

#Sum by month
# use start of each month as the timestamp
y = F['SalesRevenue_GBP'].resample('MS').sum()

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8

#forecasting with Seasonal ARIMA (Autoregressive Integrated Moving Averag)

#p = d = q = range(0, 2)
#pdq = list(itertools.product(p, d, q))
#seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]

y=y[:-1]
mod = sm.tsa.statespace.SARIMAX(y,
                                order=(1, 1, 1),
                                seasonal_order=(1, 1, 0, 12),
                                enforce_stationarity=False,
                                enforce_invertibility=False)

results = mod.fit()

#forecasts with confidence intervals generated by the model, 
#confidence intervals grow larger as we move further out into the future.

pred_uc = results.get_forecast(steps=3)
pred_ci = pred_uc.conf_int()

#plot ARIMA forcast
#ax = y.plot(label='observed', figsize=(14, 7))
#pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
#ax.fill_between(pred_ci.index,
#                pred_ci.iloc[:, 0],
#                pred_ci.iloc[:, 1], color='k', alpha=.25)
#ax.set_xlabel('Date')
#ax.set_ylabel('SalesRevenue_GBP')

#plt.legend()
#plt.show()

monthsYTD = date_max.month -1 +3
month0 = 1

sales_monthly = (y[-(date_max.month -1):]).append(pred_uc.predicted_mean)
sales_CUM = np.cumsum(sales_monthly)
sales_CUM_f = sales_CUM[-3:]


#ax = (sales_CUM/1000).plot(label='Actual YTD Shop sales in thousands GBP', figsize=(14, 7))
#(sales_CUM_f/1000).plot(ax=ax, label='Forcasted YTD Shop sales in thousands GBP')
#ax.set_xlabel('Date')
#ax.set_ylabel('YTD Shop Sales, thousands GBP')
#plt.title("YTD Shop Sales, thousands GBP")
#plt.legend()
#plt.show()

plt.step(sales_CUM.index, (sales_CUM/1000), 'b-', where='post', label='Actual YTD Online sales in thousands GBP')  # drawstyle="steps-post",
plt.step(sales_CUM_f.index, (sales_CUM_f/1000), 'r-', where='post', label='Forcasted YTD Online sales in thousands GBP')  # drawstyle="steps-post",
plt.xlabel("Date")
plt.ylabel("YTD Online Sales, thousands GBP")
plt.title("YTD Online Sales, thousands GBP", size = 30)
plt.legend()
plt.show()
